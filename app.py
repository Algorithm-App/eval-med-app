import streamlit as st
import json
import openai

st.set_page_config(page_title="√âvaluation M√©dicale IA", page_icon="üß†")
st.title("üß† Application d'√âvaluation M√©dicale Automatis√©e avec GPT-4")

st.markdown("""
Cette application permet √† l'op√©rateur de :
1. Charger un cas clinique
2. Charger une grille d'√©valuation (format JSON)
3. Charger la r√©ponse de l'√©tudiant (transcrite)
4. G√©n√©rer une √©valuation automatis√©e √† l'aide de GPT-4
""")

# 1. Cas clinique
tab1, tab2 = st.tabs(["üìÑ Cas clinique", "üìã Grille d'√©valuation"])

with tab1:
    clinical_file = st.file_uploader("Charger le cas clinique (.txt ou .docx)", type=["txt"])
    clinical_text = ""
    if clinical_file is not None:
        clinical_text = clinical_file.read().decode("utf-8")
        st.text_area("Contenu du cas clinique :", value=clinical_text, height=300)

with tab2:
    rubric_file = st.file_uploader("Charger la grille d'√©valuation (.json)", type=["json"])
    rubric = None
    if rubric_file is not None:
        rubric = json.load(rubric_file)
        st.markdown("**Grille charg√©e :**")
        st.json(rubric)

# 2. R√©ponse √©tudiante
st.markdown("## üé§ R√©ponse de l'√©tudiant")
student_response_file = st.file_uploader("Charger la r√©ponse transcrite de l'√©tudiant (.txt)", type=["txt"])
student_response = ""
if student_response_file is not None:
    student_response = student_response_file.read().decode("utf-8")
    st.text_area("R√©ponse √©tudiante :", value=student_response, height=250)

# 3. Cl√© API OpenAI
openai_api_key = st.text_input("Cl√© API OpenAI (GPT-4)", type="password")

# 4. √âvaluation GPT-4
if st.button("üß† G√©n√©rer l'√©valuation avec GPT-4"):
    if not (clinical_text and rubric and student_response):
        st.warning("Merci de charger le cas, la grille et la r√©ponse de l'√©tudiant.")
    elif not openai_api_key:
        st.warning("Merci d'entrer votre cl√© API OpenAI.")
    else:
        prompt = f"""
Tu es examinateur m√©dical. Voici :
- Cas clinique : {clinical_text}
- R√©ponse de l'√©tudiant : {student_response}
- Grille d'√©valuation : {json.dumps(rubric, ensure_ascii=False)}

Ta t√¢che :
1. √âvalue chaque crit√®re individuellement avec justification.
2. Donne un score total (sur 18).
3. R√©dige un commentaire global concis (max 5 lignes).
"""

        with st.spinner("√âvaluation en cours avec GPT-4..."):
            openai.api_key = openai_api_key
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.3
                )
                result = response['choices'][0]['message']['content']
                st.markdown("### ‚úÖ R√©sultat de l'√©valuation")
                st.write(result)
            except Exception as e:
                st.error(f"Erreur lors de l'appel √† l'API OpenAI : {e}")
