import streamlit as st
import json
import openai
import tempfile

st.set_page_config(page_title="Ã‰valuation MÃ©dicale IA", page_icon="ðŸ§ ")
st.title("ðŸ§  Application d'Ã‰valuation MÃ©dicale AutomatisÃ©e avec GPT-4 et Transcription Audio")

st.markdown("""
Cette application permet Ã  l'opÃ©rateur de :
1. Charger un cas clinique
2. Charger une grille d'Ã©valuation (format JSON)
3. Enregistrer ou charger la rÃ©ponse orale de l'Ã©tudiant
4. Transcrire automatiquement l'audio avec Whisper (OpenAI)
5. Ã‰valuer la rÃ©ponse avec GPT-4
""")

# 1. Cas clinique
tab1, tab2 = st.tabs(["ðŸ“„ Cas clinique", "ðŸ“‹ Grille d'Ã©valuation"])

with tab1:
    clinical_file = st.file_uploader("Charger le cas clinique (.txt ou .docx)", type=["txt"])
    clinical_text = ""
    if clinical_file is not None:
        clinical_text = clinical_file.read().decode("utf-8")
        st.text_area("Contenu du cas clinique :", value=clinical_text, height=300)

with tab2:
    rubric_file = st.file_uploader("Charger la grille d'Ã©valuation (.json)", type=["json"])
    rubric = None
    if rubric_file is not None:
        rubric = json.load(rubric_file)
        st.markdown("**Grille chargÃ©e :**")
        st.json(rubric)

# 2. Audio de l'Ã©tudiant
st.markdown("## ðŸŽ¤ RÃ©ponse orale de l'Ã©tudiant")
audio_file = st.file_uploader("Charger un fichier audio (.mp3, .wav, .m4a)", type=["mp3", "wav", "m4a"])
student_response = ""

openai_api_key = st.text_input("ClÃ© API OpenAI (GPT-4 & Whisper)", type="password")

if st.button("ðŸ”ˆ Transcrire l'audio avec Whisper"):
    if not audio_file or not openai_api_key:
        st.warning("Veuillez charger un fichier audio et fournir votre clÃ© API.")
    else:
        with st.spinner("Transcription en cours..."):
            openai.api_key = openai_api_key
            with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
                tmp_file.write(audio_file.read())
                tmp_path = tmp_file.name

            try:
                audio_file_for_api = open(tmp_path, "rb")
                transcript = openai.Audio.transcribe("whisper-1", audio_file_for_api, language="fr")
                student_response = transcript["text"]
                st.success("Transcription terminÃ©e âœ…")
                st.text_area("Texte transcrit :", student_response, height=250)
            except Exception as e:
                st.error(f"Erreur lors de la transcription : {e}")

# 3. Ã‰valuation GPT-4
if st.button("ðŸ§  GÃ©nÃ©rer l'Ã©valuation avec GPT-4"):
    if not (clinical_text and rubric and student_response):
        st.warning("Merci de charger le cas, la grille et la rÃ©ponse de l'Ã©tudiant.")
    elif not openai_api_key:
        st.warning("Merci d'entrer votre clÃ© API OpenAI.")
    else:
        prompt = f"""
Tu es examinateur mÃ©dical. Voici :
- Cas clinique : {clinical_text}
- RÃ©ponse de l'Ã©tudiant : {student_response}
- Grille d'Ã©valuation : {json.dumps(rubric, ensure_ascii=False)}

Ta tÃ¢che :
1. Ã‰value chaque critÃ¨re individuellement avec justification.
2. Donne un score total (sur 18).
3. RÃ©dige un commentaire global concis (max 5 lignes).
"""

        with st.spinner("Ã‰valuation en cours avec GPT-4..."):
            openai.api_key = openai_api_key
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.3
                )
                result = response['choices'][0]['message']['content']
                st.markdown("### âœ… RÃ©sultat de l'Ã©valuation")
                st.write(result)
            except Exception as e:
                st.error(f"Erreur lors de l'appel Ã  l'API OpenAI : {e}")
